name: 🧅 Build & Publish Tor Guard Relay Image

on:
  workflow_dispatch:
  schedule:
    - cron: '0 3 * * 1' # Weekly rebuild - Monday 03:00 UTC
  push:
    tags:
      - 'v*.*' # Trigger only on version tags

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/onion-relay

jobs:
  build-and-push:
    name: 🐳 Multi-Arch Build & Release
    runs-on: ubuntu-latest

    steps:
      # 🧩 Checkout
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # 🧮 Versioning & Metadata
      - name: 🧮 Determine Version & Build Metadata
        id: meta
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
            VERSION="${GITHUB_REF#refs/tags/v}"
          else
            VERSION="manual-${GITHUB_RUN_NUMBER}"
          fi
          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "date=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> "$GITHUB_OUTPUT"
          echo "short_sha=$(git rev-parse --short HEAD)" >> "$GITHUB_OUTPUT"

      # 🔐 Auth
      - name: 🔐 Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 🏗️ Build Setup
      - name: ⚙️ Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm64,amd64

      - name: 🏗️ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 🏷️ Tags
      - name: 🏷️ Generate Docker Tags
        id: tags
        run: |
          TAGS="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          TAGS="${TAGS},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_sha }}"
          echo "tags=${TAGS}" >> "$GITHUB_OUTPUT"

      # 🐳 Build & Push
      - name: 🐳 Build and Push Multi-Arch Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./onion.container
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          build-args: |
            BUILD_DATE=${{ steps.meta.outputs.date }}
            BUILD_VERSION=${{ steps.meta.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: |
            org.opencontainers.image.title=Tor Guard Relay
            org.opencontainers.image.description=Hardened Tor Guard Relay with diagnostics
            org.opencontainers.image.version=${{ steps.meta.outputs.version }}
            org.opencontainers.image.created=${{ steps.meta.outputs.date }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repositoryUrl }}

      # 📊 Summary
      - name: 📊 Generate Build Summary
        run: |
          echo "## 🧅 Tor Guard Relay Build Complete!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📦 Build Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** \`${{ steps.meta.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Date:** \`${{ steps.meta.outputs.date }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Git SHA:** \`${{ steps.meta.outputs.short_sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Platforms:** \`linux/amd64\`, \`linux/arm64\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🏷️ Published Tags" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      # ✅ Verify
      - name: ✅ Verify Image
        run: |
          echo "✅ Successfully pushed multi-arch image"
          echo "🔖 Latest tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
          echo "🔖 Version tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}"
          echo "🔖 SHA tag: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.meta.outputs.version }}-${{ steps.meta.outputs.short_sha }}"

      # 🧾 Extract Changelog Section
      - name: 🧾 Extract relevant changelog section
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "## 🧅 Tor Guard Relay v${VERSION} Release Notes" > release_notes.md
          echo "" >> release_notes.md

          # Extract from the version header until the next '## [' or the end of file
          awk "/## \\[${VERSION}\\]/ {flag=1; next} /^## \\[/ {flag=0} flag" CHANGELOG.md >> release_notes.md

          # Fallback: if nothing was written (e.g. last version block)
          if [ ! -s release_notes.md ] || ! grep -q "###" release_notes.md; then
            awk "/## \\[${VERSION}\\]/,0" CHANGELOG.md >> release_notes.md
          fi

          echo "" >> release_notes.md
          echo "✅ Extracted changelog section for v${VERSION}:"
          cat release_notes.md

      # 🚀 Publish Release
      - name: 🚀 Publish GitHub Release
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.meta.outputs.version }}
          name: "Tor Guard Relay v${{ steps.meta.outputs.version }}"
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
